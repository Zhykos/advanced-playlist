{
	"info": {
		"_postman_id": "13506f5d-830a-4ac0-a59e-37fb47eb100d",
		"name": "Advanced Playlist - Integration tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Database",
			"item": [
				{
					"name": "_dev_",
					"item": [
						{
							"name": "Clear database",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.deletedChannels).to.be.not.undefined;\r",
											"    pm.expect(jsonData.deletedVideos).to.be.not.undefined;\r",
											"    pm.expect(jsonData.remainingChannels).to.eql(0);\r",
											"    pm.expect(jsonData.remainingVideos).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/dev/database/clear",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"dev",
										"database",
										"clear"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get videos from database",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/database/video",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"database",
										"video"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get channels from database",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/database/channel",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"database",
										"channel"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all videos to display",
					"item": [
						{
							"name": "getVideos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    const data01 = jsonData[0];\r",
											"    pm.expect(data01.id).to.eql(\"video-01\");\r",
											"    pm.expect(data01.title).to.eql(\"Video 01\");\r",
											"    pm.expect(data01._id).to.not.undefined;\r",
											"\r",
											"    const data02 = jsonData[1];\r",
											"    pm.expect(data02.id).to.eql(\"video-02\");\r",
											"    pm.expect(data02.title).to.eql(\"Video 02\");\r",
											"    pm.expect(data02._id).to.not.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const port = pm.environment.get(\"port\");\r",
											"pm.sendRequest({\r",
											"    url: `http://localhost:${port}/dev/database/clear`,\r",
											"    method: 'POST'\r",
											"}, () => {\r",
											"    pm.sendRequest({\r",
											"        url: `http://localhost:${port}/database/video`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify([\r",
											"                {\r",
											"                    \"id\": \"video-01\",\r",
											"                    \"title\": \"Video 01\"\r",
											"                },\r",
											"                {\r",
											"                    \"id\": \"video-02\",\r",
											"                    \"title\": \"Video 02\"\r",
											"                }\r",
											"            ])\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/database/video",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"database",
										"video"
									]
								}
							},
							"response": []
						},
						{
							"name": "getVideos - No video",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const port = pm.environment.get(\"port\");\r",
											"pm.sendRequest({\r",
											"    url: `http://localhost:${port}/dev/database/clear`,\r",
											"    method: 'POST'\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/database/video",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"database",
										"video"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all channels to display",
					"item": [
						{
							"name": "getChannels",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    const data01 = jsonData[0];\r",
											"    pm.expect(data01.id).to.eql(\"channel-01\");\r",
											"    pm.expect(data01.title).to.eql(\"Channel 01\");\r",
											"    pm.expect(data01._id).to.not.undefined;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const port = pm.environment.get(\"port\");\r",
											"pm.sendRequest({\r",
											"    url: `http://localhost:${port}/dev/database/clear`,\r",
											"    method: 'POST'\r",
											"}, () => {\r",
											"    pm.sendRequest({\r",
											"        url: `http://localhost:${port}/database/channel`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"id\": \"channel-01\",\r",
											"                \"title\": \"Channel 01\"\r",
											"            })\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/database/channel",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"database",
										"channel"
									]
								}
							},
							"response": []
						},
						{
							"name": "getChannels - No channel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const port = pm.environment.get(\"port\");\r",
											"pm.sendRequest({\r",
											"    url: `http://localhost:${port}/dev/database/clear`,\r",
											"    method: 'POST'\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/database/channel",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"database",
										"channel"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Save videos into the playlist",
					"item": [
						{
							"name": "saveVideos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(2);\r",
											"\r",
											"    const jsonData01 = jsonData[0];\r",
											"    pm.expect(jsonData01.id).to.eql(\"video-001\");\r",
											"    pm.expect(jsonData01.title).to.eql(\"Video 001\");\r",
											"    pm.expect(jsonData01._databaseId).to.match(/[a-f0-9]+/i);\r",
											"\r",
											"    const jsonData02 = jsonData[1];\r",
											"    pm.expect(jsonData02.id).to.eql(\"video-002\");\r",
											"    pm.expect(jsonData02.title).to.eql(\"Video 002\");\r",
											"    pm.expect(jsonData02._databaseId).to.match(/[a-f0-9]+/i);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const port = pm.environment.get(\"port\");\r",
											"pm.sendRequest({\r",
											"    url: `http://localhost:${port}/dev/database/clear`,\r",
											"    method: 'POST'\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"id\": \"video-001\",\r\n        \"title\": \"Video 001\"\r\n    },\r\n    {\r\n        \"id\": \"video-002\",\r\n        \"title\": \"Video 002\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/database/video",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"database",
										"video"
									]
								}
							},
							"response": []
						},
						{
							"name": "saveVideos - Empty body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const port = pm.environment.get(\"port\");\r",
											"pm.sendRequest({\r",
											"    url: `http://localhost:${port}/dev/database/clear`,\r",
											"    method: 'POST'\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/database/video",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"database",
										"video"
									]
								}
							},
							"response": []
						},
						{
							"name": "saveVideos - Video already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"\r",
											"    const jsonData01 = jsonData[0];\r",
											"    pm.expect(jsonData01.id).to.eql(\"video-03\");\r",
											"    pm.expect(jsonData01.title).to.eql(\"Video 003\");\r",
											"    pm.expect(jsonData01._databaseId).to.match(/[a-f0-9]+/i);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const port = pm.environment.get(\"port\");\r",
											"pm.sendRequest({\r",
											"    url: `http://localhost:${port}/dev/database/clear`,\r",
											"    method: 'POST'\r",
											"}, () => {\r",
											"    pm.sendRequest({\r",
											"        url: `http://localhost:${port}/database/video`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify([\r",
											"                {\r",
											"                    \"id\": \"video-01\",\r",
											"                    \"title\": \"Video 01\"\r",
											"                },\r",
											"                {\r",
											"                    \"id\": \"video-02\",\r",
											"                    \"title\": \"Video 02\"\r",
											"                }\r",
											"            ])\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"id\": \"video-01\",\r\n        \"title\": \"Video 001\"\r\n    },\r\n    {\r\n        \"id\": \"video-02\",\r\n        \"title\": \"Video 002\"\r\n    },\r\n    {\r\n        \"id\": \"video-03\",\r\n        \"title\": \"Video 003\"\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/database/video",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"database",
										"video"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Subscribe to a channel",
					"item": [
						{
							"name": "subscribeToChannel",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData.id).to.eql(\"channel-01\");\r",
											"    pm.expect(jsonData.title).to.eql(\"Channel 01\");\r",
											"    pm.expect(jsonData._databaseId).to.match(/[a-f0-9]+/i)\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const port = pm.environment.get(\"port\");\r",
											"pm.sendRequest({\r",
											"    url: `http://localhost:${port}/dev/database/clear`,\r",
											"    method: 'POST'\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"channel-01\",\r\n    \"title\": \"Channel 01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/database/channel",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"database",
										"channel"
									]
								}
							},
							"response": []
						},
						{
							"name": "subscribeToChannel - Channel already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Channel with ID 'channel-01' already exists in the database.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const port = pm.environment.get(\"port\");\r",
											"pm.sendRequest({\r",
											"    url: `http://localhost:${port}/dev/database/clear`,\r",
											"    method: 'POST'\r",
											"}, () => {\r",
											"    pm.sendRequest({\r",
											"        url: `http://localhost:${port}/database/channel`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"id\": \"channel-01\",\r",
											"                \"title\": \"Channel 01\"\r",
											"            })\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"channel-01\",\r\n    \"title\": \"Channel 01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:{{port}}/database/channel",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"database",
										"channel"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Providers",
			"item": [
				{
					"name": "Get all new videos from subscribed channels",
					"item": [
						{
							"name": "getVideosFromSubscribedChannels",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(5);\r",
											"    \r",
											"    const data01 = jsonData[1];\r",
											"    pm.expect(data01.id).to.match(/[a-z0-9]+/i);\r",
											"    pm.expect(data01.title.length).to.greaterThan(0);\r",
											"    pm.expect(data01.played).to.be.false;\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const port = pm.environment.get(\"port\");\r",
											"pm.sendRequest({\r",
											"    url: `http://localhost:${port}/dev/database/clear`,\r",
											"    method: 'POST'\r",
											"}, () => {\r",
											"    pm.sendRequest({\r",
											"        url: `http://localhost:${port}/database/channel`,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            'Accept': 'application/json',\r",
											"            'Content-Type': 'application/json'\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify({\r",
											"                \"id\": \"UCWJHqzXc7rKO7h5TzYYBNFw\",\r",
											"                \"title\": \"Zhykos\"\r",
											"            })\r",
											"        }\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/providers/videos",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"providers",
										"videos"
									]
								}
							},
							"response": []
						},
						{
							"name": "getVideosFromSubscribedChannels - No subscription",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const port = pm.environment.get(\"port\");\r",
											"pm.sendRequest({\r",
											"    url: `http://localhost:${port}/dev/database/clear`,\r",
											"    method: 'POST'\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/providers/videos",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"providers",
										"videos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Search a channel with its name on all providers",
					"item": [
						{
							"name": "searchChannelFromProviders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"    \r",
											"    const data01 = jsonData[0];\r",
											"    pm.expect(data01.id).to.eql(\"UCWJHqzXc7rKO7h5TzYYBNFw\");\r",
											"    pm.expect(data01.title).to.eql(\"zhykos\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/providers/channel/zhykos",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"providers",
										"channel",
										"zhykos"
									]
								}
							},
							"response": []
						},
						{
							"name": "searchChannelFromProviders - No result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check response time\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30_000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check status code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check JSON\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:{{port}}/providers/channel/zhykosfake",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "{{port}}",
									"path": [
										"providers",
										"channel",
										"zhykosfake"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}